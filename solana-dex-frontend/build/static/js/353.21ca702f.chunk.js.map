{"version":3,"file":"static/js/353.21ca702f.chunk.js","mappings":"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","sources":["components/LimitOrder.js","components/LiquidityPools.js","components/PortfolioAnalytics.js","components/Staking.js","components/Backtest.js","components/PaperTrading.js","components/OrderBook.js","components/MarketOverview.js","components/Alerts.js","components/Chat.js","components/Tutorials.js","components/TradingDashboard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { Connection, PublicKey, Transaction } from '@solana/web3.js'; // Removed SystemProgram\nimport { SERUM_PROGRAM_ID, Market } from '@project-serum/serum';\n\nconst LimitOrder = () => {\n  const { publicKey, signTransaction } = useWallet();\n  const [price, setPrice] = useState('');\n  const [amount, setAmount] = useState('');\n  const [statusMessage, setStatusMessage] = useState('');\n\n  const handleLimitOrder = async () => {\n    if (!publicKey) {\n      setStatusMessage('Connect your wallet first');\n      return;\n    }\n\n    const connection = new Connection('https://api.mainnet-beta.solana.com');\n    const marketAddress = new PublicKey('YOUR_MARKET_ADDRESS');\n    const market = await Market.load(connection, marketAddress, {}, SERUM_PROGRAM_ID);\n\n    const owner = publicKey;\n    const payer = publicKey;\n\n    const [order] = await market.placeOrder({\n      owner,\n      payer,\n      side: 'buy', // 'buy' or 'sell'\n      price: parseFloat(price),\n      size: parseFloat(amount),\n      orderType: 'limit', // 'limit', 'ioc', 'postOnly'\n      clientId: new Date().getTime(),\n    });\n\n    const transaction = new Transaction().add(order);\n    const signedTransaction = await signTransaction(transaction);\n\n    try {\n      const txid = await connection.sendRawTransaction(signedTransaction.serialize());\n      await connection.confirmTransaction(txid);\n      setStatusMessage(`Order placed: ${txid}`);\n    } catch (error) {\n      setStatusMessage(`Error placing order: ${error.message}`);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Limit Order</h2>\n      <input\n        type=\"number\"\n        placeholder=\"Price\"\n        value={price}\n        onChange={(e) => setPrice(e.target.value)}\n      />\n      <input\n        type=\"number\"\n        placeholder=\"Amount\"\n        value={amount}\n        onChange={(e) => setAmount(e.target.value)}\n      />\n      <button onClick={handleLimitOrder}>Place Limit Order</button>\n      <p>{statusMessage}</p>\n    </div>\n  );\n};\n\nexport default LimitOrder;\n","import React, { useState, useEffect } from 'react';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { Connection, PublicKey, Transaction, SystemProgram } from '@solana/web3.js';\n\nconst LiquidityPools = () => {\n  const { publicKey, signTransaction, connected } = useWallet();\n  const [poolData, setPoolData] = useState([]);\n  const [amount, setAmount] = useState('');\n  const [poolStatus, setPoolStatus] = useState('');\n\n  useEffect(() => {\n    // Fetch existing pool data\n    const fetchPoolData = async () => {\n      // Implement logic to fetch pool data\n      const data = [\n        { name: 'Pool 1', liquidity: 1000, address: 'POOL_1_ADDRESS' }, // Replace with actual pool address\n        { name: 'Pool 2', liquidity: 2000, address: 'POOL_2_ADDRESS' }, // Replace with actual pool address\n      ];\n      setPoolData(data);\n    };\n\n    fetchPoolData();\n  }, []);\n\n  const handleAddLiquidity = async (pool) => {\n    if (!connected) {\n      setPoolStatus('Please connect your wallet.');\n      return;\n    }\n\n    const connection = new Connection('https://api.mainnet-beta.solana.com');\n    const poolAddress = new PublicKey(pool.address);\n\n    const transaction = new Transaction().add(\n      SystemProgram.transfer({\n        fromPubkey: publicKey,\n        toPubkey: poolAddress,\n        lamports: amount * 1000000000, // Convert SOL to lamports (1 SOL = 10^9 lamports)\n      })\n    );\n\n    try {\n      const signedTransaction = await signTransaction(transaction);\n      const txid = await connection.sendRawTransaction(signedTransaction.serialize());\n      await connection.confirmTransaction(txid);\n      setPoolStatus(`Added ${amount} liquidity to ${pool.name} successfully: ${txid}`);\n    } catch (error) {\n      setPoolStatus(`Error adding liquidity: ${error.message}`);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Liquidity Pools</h2>\n      <ul>\n        {poolData.map((pool) => (\n          <li key={pool.name}>\n            {pool.name}: {pool.liquidity} liquidity\n            <input\n              type=\"number\"\n              placeholder=\"Amount to add\"\n              value={amount}\n              onChange={(e) => setAmount(e.target.value)}\n            />\n            <button onClick={() => handleAddLiquidity(pool)}>Add Liquidity</button>\n          </li>\n        ))}\n      </ul>\n      <p>{poolStatus}</p>\n    </div>\n  );\n};\n\nexport default LiquidityPools;\n","import React from 'react';\nimport { Pie } from 'react-chartjs-2';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\n\nChartJS.register(ArcElement, Tooltip, Legend);\n\nconst PortfolioAnalytics = ({ portfolio = [] }) => {\n  const totalValue = portfolio.reduce((sum, asset) => sum + asset.value, 0);\n  const gains = portfolio.reduce((sum, asset) => sum + asset.gain, 0);\n\n  const assetAllocationData = {\n    labels: portfolio.map(asset => asset.name),\n    datasets: [\n      {\n        data: portfolio.map(asset => asset.value),\n        backgroundColor: portfolio.map((_, index) => `hsl(${index * 60}, 70%, 50%)`),\n      }\n    ]\n  };\n\n  const assetAllocationOptions = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Asset Allocation',\n      },\n    },\n  };\n\n  return (\n    <div>\n      <h2>Portfolio Analytics</h2>\n      <div>\n        <h3>Summary</h3>\n        <p>Total Value: ${totalValue.toFixed(2)}</p>\n        <p>Total Gains: ${gains.toFixed(2)}</p>\n      </div>\n      <div>\n        <h3>Asset Allocation</h3>\n        <Pie data={assetAllocationData} options={assetAllocationOptions} />\n      </div>\n      <div>\n        <h3>Details</h3>\n        <ul>\n          {portfolio.map((asset, index) => (\n            <li key={index}>\n              {asset.name}: {asset.amount} (${asset.value.toFixed(2)})\n            </li>\n          ))}\n        </ul>\n      </div>\n      {/* Add more detailed analytics and visualizations as needed */}\n    </div>\n  );\n};\n\nexport default PortfolioAnalytics;\n","import React, { useState } from 'react';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { Connection, PublicKey, Transaction, SystemProgram } from '@solana/web3.js';\n\nconst Staking = () => {\n  const { publicKey, signTransaction } = useWallet();\n  const [amount, setAmount] = useState('');\n  const [statusMessage, setStatusMessage] = useState('');\n\n  const handleStake = async () => {\n    if (!publicKey) {\n      setStatusMessage('Connect your wallet first');\n      return;\n    }\n\n    const connection = new Connection('https://api.mainnet-beta.solana.com');\n    const stakingAccount = new PublicKey('YOUR_STAKING_ACCOUNT'); // Replace with your staking account\n\n    const transaction = new Transaction().add(\n      SystemProgram.transfer({\n        fromPubkey: publicKey,\n        toPubkey: stakingAccount,\n        lamports: amount * 1000000000, // Convert SOL to lamports (1 SOL = 10^9 lamports)\n      })\n    );\n\n    try {\n      const signedTransaction = await signTransaction(transaction);\n      const txid = await connection.sendRawTransaction(signedTransaction.serialize());\n      await connection.confirmTransaction(txid);\n      setStatusMessage(`Staked ${amount} tokens successfully: ${txid}`);\n    } catch (error) {\n      setStatusMessage(`Error staking tokens: ${error.message}`);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Staking</h2>\n      <input\n        type=\"number\"\n        placeholder=\"Amount\"\n        value={amount}\n        onChange={(e) => setAmount(e.target.value)}\n      />\n      <button onClick={handleStake}>Stake Tokens</button>\n      <p>{statusMessage}</p>\n    </div>\n  );\n};\n\nexport default Staking;\n","import React, { useState } from 'react';\n\nconst Backtest = () => {\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [initialInvestment, setInitialInvestment] = useState('');\n  const [backtestResult, setBacktestResult] = useState(null);\n\n  const handleBacktest = () => {\n    // Implement backtesting logic here\n    // For example, calculate returns based on historical data\n    const mockResult = {\n      finalValue: 12000,\n      performance: 20, // 20% return\n    };\n    setBacktestResult(mockResult);\n  };\n\n  return (\n    <div>\n      <h2>Backtest Trading Strategy</h2>\n      <label>\n        Start Date:\n        <input type=\"date\" value={startDate} onChange={(e) => setStartDate(e.target.value)} />\n      </label>\n      <label>\n        End Date:\n        <input type=\"date\" value={endDate} onChange={(e) => setEndDate(e.target.value)} />\n      </label>\n      <label>\n        Initial Investment:\n        <input\n          type=\"number\"\n          value={initialInvestment}\n          onChange={(e) => setInitialInvestment(e.target.value)}\n        />\n      </label>\n      <button onClick={handleBacktest}>Run Backtest</button>\n      {backtestResult && (\n        <div>\n          <h3>Backtest Result</h3>\n          <p>Final Value: ${backtestResult.finalValue}</p>\n          <p>Performance: {backtestResult.performance}%</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Backtest;\n","import React, { useState, useEffect } from 'react';\n\nconst PaperTrading = () => {\n  const [portfolio, setPortfolio] = useState([]);\n  const [balance, setBalance] = useState(10000); // Initial balance for paper trading\n  const [tradingHistory, setTradingHistory] = useState([]);\n  const [symbol, setSymbol] = useState('');\n  const [price, setPrice] = useState('');\n  const [amount, setAmount] = useState('');\n  const [statusMessage, setStatusMessage] = useState('');\n\n  useEffect(() => {\n    // Load saved portfolio and trading history from local storage\n    const savedPortfolio = JSON.parse(localStorage.getItem('paperTradingPortfolio')) || [];\n    const savedHistory = JSON.parse(localStorage.getItem('paperTradingHistory')) || [];\n    setPortfolio(savedPortfolio);\n    setTradingHistory(savedHistory);\n  }, []);\n\n  useEffect(() => {\n    // Save portfolio and trading history to local storage\n    localStorage.setItem('paperTradingPortfolio', JSON.stringify(portfolio));\n    localStorage.setItem('paperTradingHistory', JSON.stringify(tradingHistory));\n  }, [portfolio, tradingHistory]);\n\n  const handleBuy = () => {\n    const totalCost = price * amount;\n    if (totalCost > balance) {\n      setStatusMessage('Insufficient balance to complete the trade.');\n      return;\n    }\n\n    const updatedPortfolio = [...portfolio];\n    const existingAsset = updatedPortfolio.find(asset => asset.symbol === symbol);\n\n    if (existingAsset) {\n      existingAsset.amount += parseFloat(amount);\n      existingAsset.totalValue += totalCost;\n    } else {\n      updatedPortfolio.push({ symbol, amount: parseFloat(amount), totalValue: totalCost });\n    }\n\n    setPortfolio(updatedPortfolio);\n    setBalance(balance - totalCost);\n    setTradingHistory([...tradingHistory, { type: 'buy', symbol, price, amount, date: new Date() }]);\n    setStatusMessage(`Bought ${amount} of ${symbol} at ${price} per unit.`);\n  };\n\n  const handleSell = () => {\n    const existingAsset = portfolio.find(asset => asset.symbol === symbol);\n\n    if (!existingAsset || existingAsset.amount < amount) {\n      setStatusMessage('Insufficient assets to complete the trade.');\n      return;\n    }\n\n    const totalValue = price * amount;\n    const updatedPortfolio = portfolio.map(asset =>\n      asset.symbol === symbol\n        ? { ...asset, amount: asset.amount - parseFloat(amount), totalValue: asset.totalValue - totalValue }\n        : asset\n    ).filter(asset => asset.amount > 0);\n\n    setPortfolio(updatedPortfolio);\n    setBalance(balance + totalValue);\n    setTradingHistory([...tradingHistory, { type: 'sell', symbol, price, amount, date: new Date() }]);\n    setStatusMessage(`Sold ${amount} of ${symbol} at ${price} per unit.`);\n  };\n\n  return (\n    <div>\n      <h2>Paper Trading</h2>\n      <div>\n        <h3>Portfolio</h3>\n        <ul>\n          {portfolio.map((asset, index) => (\n            <li key={index}>\n              {asset.symbol}: {asset.amount} units (Total Value: ${asset.totalValue.toFixed(2)})\n            </li>\n          ))}\n        </ul>\n        <p>Balance: ${balance.toFixed(2)}</p>\n      </div>\n      <div>\n        <h3>Trade</h3>\n        <input\n          type=\"text\"\n          placeholder=\"Symbol\"\n          value={symbol}\n          onChange={(e) => setSymbol(e.target.value)}\n        />\n        <input\n          type=\"number\"\n          placeholder=\"Price\"\n          value={price}\n          onChange={(e) => setPrice(e.target.value)}\n        />\n        <input\n          type=\"number\"\n          placeholder=\"Amount\"\n          value={amount}\n          onChange={(e) => setAmount(e.target.value)}\n        />\n        <button onClick={handleBuy}>Buy</button>\n        <button onClick={handleSell}>Sell</button>\n      </div>\n      <p>{statusMessage}</p>\n      <div>\n        <h3>Trading History</h3>\n        <ul>\n          {tradingHistory.map((trade, index) => (\n            <li key={index}>\n              {trade.date.toString()} - {trade.type.toUpperCase()} {trade.amount} of {trade.symbol} at ${trade.price} per unit\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default PaperTrading;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst OrderBook = ({ pair }) => {\n  const [orders, setOrders] = useState({ bids: [], asks: [] });\n\n  useEffect(() => {\n    const fetchOrderBook = async () => {\n      try {\n        const response = await axios.get(`https://api.exchange.com/orderbook/${pair}`);\n        setOrders(response.data);\n      } catch (error) {\n        console.error('Error fetching order book:', error);\n      }\n    };\n\n    fetchOrderBook();\n  }, [pair]);\n\n  return (\n    <div>\n      <h2>Order Book for {pair}</h2>\n      <div>\n        <h3>Bids</h3>\n        <ul>\n          {orders.bids.map((bid, index) => (\n            <li key={index}>\n              {bid.price} - {bid.amount}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div>\n        <h3>Asks</h3>\n        <ul>\n          {orders.asks.map((ask, index) => (\n            <li key={index}>\n              {ask.price} - {ask.amount}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default OrderBook;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst MarketOverview = () => {\n  const [markets, setMarkets] = useState([]);\n\n  useEffect(() => {\n    const fetchMarkets = async () => {\n      try {\n        const response = await axios.get('https://api.exchange.com/markets');\n        setMarkets(response.data);\n      } catch (error) {\n        console.error('Error fetching markets:', error);\n      }\n    };\n\n    fetchMarkets();\n  }, []);\n\n  return (\n    <div>\n      <h2>Market Overview</h2>\n      <ul>\n        {markets.map((market, index) => (\n          <li key={index}>\n            {market.pair}: {market.price} (24h: {market.change}%)\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default MarketOverview;\n","import React, { useState } from 'react';\n\nconst Alerts = () => {\n  const [alerts, setAlerts] = useState([]);\n  const [token, setToken] = useState('');\n  const [price, setPrice] = useState('');\n\n  const handleAddAlert = () => {\n    setAlerts([...alerts, { token, price }]);\n    setToken('');\n    setPrice('');\n  };\n\n  return (\n    <div>\n      <h2>Price Alerts</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Token\"\n        value={token}\n        onChange={(e) => setToken(e.target.value)}\n      />\n      <input\n        type=\"number\"\n        placeholder=\"Price\"\n        value={price}\n        onChange={(e) => setPrice(e.target.value)}\n      />\n      <button onClick={handleAddAlert}>Add Alert</button>\n      <ul>\n        {alerts.map((alert, index) => (\n          <li key={index}>\n            {alert.token} at ${alert.price}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Alerts;\n","import React, { useState } from 'react';\n\nconst Chat = () => {\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState('');\n\n  const handleSendMessage = () => {\n    setMessages([...messages, message]);\n    setMessage('');\n  };\n\n  return (\n    <div>\n      <h2>Community Chat</h2>\n      <div>\n        <ul>\n          {messages.map((msg, index) => (\n            <li key={index}>{msg}</li>\n          ))}\n        </ul>\n        <input\n          type=\"text\"\n          placeholder=\"Type your message\"\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n        />\n        <button onClick={handleSendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n","import React, { useState, useEffect } from 'react';\n\nconst Tutorials = () => {\n  const [tutorials, setTutorials] = useState([]);\n\n  useEffect(() => {\n    const fetchTutorials = async () => {\n      // Fetch or load tutorials data here\n      const tutorialData = [\n        { title: 'How to Trade', link: '#' },\n        { title: 'Understanding Order Types', link: '#' },\n        // Add more tutorials as needed\n      ];\n      setTutorials(tutorialData);\n    };\n\n    fetchTutorials();\n  }, []);\n\n  return (\n    <div>\n      <h2>Tutorials</h2>\n      <ul>\n        {tutorials.map((tutorial, index) => (\n          <li key={index}>\n            <a href={tutorial.link}>{tutorial.title}</a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Tutorials;\n","// src/components/TradingDashboard.js\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport Backtest from './Backtest';\nimport LimitOrder from './LimitOrder';\nimport Staking from './Staking';\nimport PortfolioAnalytics from './PortfolioAnalytics';\nimport LiquidityPools from './LiquidityPools';\nimport PaperTrading from './PaperTrading';\nimport OrderBook from './OrderBook';\nimport MarketOverview from './MarketOverview';\nimport Alerts from './Alerts';\nimport Chat from './Chat';\nimport Tutorials from './Tutorials';\n\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\nconst TradingDashboard = () => {\n  const [data, setData] = useState([]);\n  const [portfolio] = useState([\n    { name: 'BTC', value: 1000, gain: 100, amount: 0.02 },\n    { name: 'ETH', value: 500, gain: 50, amount: 0.5 }\n  ]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const mockData = [\n        { date: '2024-01-01', price: 100 },\n        { date: '2024-01-02', price: 110 },\n        { date: '2024-01-03', price: 105 },\n      ];\n      setData(mockData);\n    };\n\n    fetchData();\n  }, []);\n\n  const calculateMovingAverage = (data, windowSize) => {\n    let averages = [];\n    for (let i = 0; i < data.length; i++) {\n      if (i < windowSize - 1) {\n        averages.push(null);\n        continue;\n      }\n      let sum = 0;\n      for (let j = 0; j < windowSize; j++) {\n        sum += data[i - j].price;\n      }\n      averages.push(sum / windowSize);\n    }\n    return averages;\n  };\n\n  const movingAverage = calculateMovingAverage(data, 3);\n\n  const chartData = {\n    labels: data.map(d => d.date),\n    datasets: [\n      {\n        label: 'Price',\n        data: data.map(d => d.price),\n        fill: false,\n        backgroundColor: 'rgb(75, 192, 192)',\n        borderColor: 'rgba(75, 192, 192, 0.2)',\n      },\n      {\n        label: '3-Day Moving Average',\n        data: movingAverage,\n        fill: false,\n        backgroundColor: 'rgb(192, 75, 192)',\n        borderColor: 'rgba(192, 75, 192, 0.2)',\n      },\n    ],\n  };\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Trading Dashboard',\n      },\n    },\n  };\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h2 style={{ marginBottom: '20px' }}>Trading Dashboard</h2>\n      <div style={{ marginBottom: '20px' }}>\n        <Line data={chartData} options={options} />\n      </div>\n      <div style={{ marginBottom: '20px' }}>\n        <Backtest />\n      </div>\n      <div style={{ marginBottom: '20px' }}>\n        <LimitOrder />\n      </div>\n      <div style={{ marginBottom: '20px' }}>\n        <Staking />\n      </div>\n      <div style={{ marginBottom: '20px' }}>\n        <PortfolioAnalytics portfolio={portfolio} />\n      </div>\n      <div style={{ marginBottom: '20px' }}>\n        <LiquidityPools />\n      </div>\n      <div style={{ marginBottom: '20px' }}>\n        <PaperTrading />\n      </div>\n      <div style={{ marginBottom: '20px' }}>\n        <OrderBook pair=\"BTC/USD\" />\n      </div>\n      <div style={{ marginBottom: '20px' }}>\n        <MarketOverview />\n      </div>\n      <div style={{ marginBottom: '20px' }}>\n        <Alerts />\n      </div>\n      <div style={{ marginBottom: '20px' }}>\n        <Chat />\n      </div>\n      <div style={{ marginBottom: '20px' }}>\n        <Tutorials />\n      </div>\n    </div>\n  );\n};\n\nexport default TradingDashboard;\n"],"names":["LimitOrder","publicKey","signTransaction","useWallet","price","setPrice","useState","amount","setAmount","statusMessage","setStatusMessage","_jsxs","children","_jsx","type","placeholder","value","onChange","e","target","onClick","async","connection","Connection","marketAddress","PublicKey","market","Market","load","SERUM_PROGRAM_ID","owner","payer","order","placeOrder","side","parseFloat","size","orderType","clientId","Date","getTime","transaction","Transaction","add","signedTransaction","txid","sendRawTransaction","serialize","confirmTransaction","concat","error","message","LiquidityPools","connected","poolData","setPoolData","poolStatus","setPoolStatus","useEffect","name","liquidity","address","fetchPoolData","map","pool","poolAddress","SystemProgram","transfer","fromPubkey","toPubkey","lamports","handleAddLiquidity","ChartJS","register","ArcElement","Tooltip","Legend","_ref","portfolio","totalValue","reduce","sum","asset","gains","gain","assetAllocationData","labels","datasets","data","backgroundColor","_","index","toFixed","Pie","options","responsive","plugins","legend","position","title","display","text","Staking","stakingAccount","Backtest","startDate","setStartDate","endDate","setEndDate","initialInvestment","setInitialInvestment","backtestResult","setBacktestResult","handleBacktest","finalValue","performance","PaperTrading","setPortfolio","balance","setBalance","tradingHistory","setTradingHistory","symbol","setSymbol","savedPortfolio","JSON","parse","localStorage","getItem","savedHistory","setItem","stringify","handleBuy","totalCost","updatedPortfolio","existingAsset","find","push","date","handleSell","filter","trade","toString","toUpperCase","pair","orders","setOrders","bids","asks","response","axios","get","console","fetchOrderBook","bid","ask","MarketOverview","markets","setMarkets","fetchMarkets","change","Alerts","alerts","setAlerts","token","setToken","handleAddAlert","alert","Chat","messages","setMessages","setMessage","msg","handleSendMessage","Tutorials","tutorials","setTutorials","link","fetchTutorials","tutorial","href","CategoryScale","LinearScale","PointElement","LineElement","Title","TradingDashboard","setData","fetchData","movingAverage","calculateMovingAverage","windowSize","averages","i","length","j","chartData","d","label","fill","borderColor","style","padding","marginBottom","Line","PortfolioAnalytics","OrderBook"],"sourceRoot":""}