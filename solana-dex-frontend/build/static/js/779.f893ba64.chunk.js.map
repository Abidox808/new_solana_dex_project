{"version":3,"file":"static/js/779.f893ba64.chunk.js","mappings":"6NASA,MAqDA,EArDeA,KACb,MAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,MAAO,GACPC,SAAU,IAEZC,iBAAkBC,EAAAA,GAAW,CAC3BH,MAAOG,EAAAA,KAAaH,MAAM,yBAAyBI,SAAS,YAC5DH,SAAUE,EAAAA,KAAaE,IAAI,EAAG,iCAAiCD,SAAS,cAE1EE,SAAWC,IACTC,QAAQC,IAAI,YAAaF,GAEzB,MAAMG,EAAW,CAAEV,MAAOO,EAAOP,OACjCL,EAAS,CAAEgB,KAAM,WAAYC,QAASF,IACtCG,EAAAA,GAAMC,QAAQ,0BAA0B,IAI5C,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,QAAMT,SAAUT,EAAOoB,aAAaD,SAAA,EAClCD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEE,EAAAA,EAAAA,KAAA,SAAOC,QAAQ,QAAOH,SAAC,WACvBE,EAAAA,EAAAA,KAAA,SACEE,GAAG,QACHT,KAAK,WACDd,EAAOwB,cAAc,WAE1BxB,EAAOyB,QAAQtB,OAASH,EAAO0B,OAAOvB,OACrCkB,EAAAA,EAAAA,KAAA,OAAAF,SAAMnB,EAAO0B,OAAOvB,QAClB,SAENe,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEE,EAAAA,EAAAA,KAAA,SAAOC,QAAQ,WAAUH,SAAC,cAC1BE,EAAAA,EAAAA,KAAA,SACEE,GAAG,WACHT,KAAK,cACDd,EAAOwB,cAAc,cAE1BxB,EAAOyB,QAAQrB,UAAYJ,EAAO0B,OAAOtB,UACxCiB,EAAAA,EAAAA,KAAA,OAAAF,SAAMnB,EAAO0B,OAAOtB,WAClB,SAENiB,EAAAA,EAAAA,KAAA,UAAQP,KAAK,SAAQK,SAAC,eAExBE,EAAAA,EAAAA,KAACM,EAAAA,GAAc,MACX,C","sources":["components/SignIn.js"],"sourcesContent":["// src/components/SignIn.js\n\nimport React from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { useGlobalDispatch } from '../contexts/GlobalStateContext';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst SignIn = () => {\n  const dispatch = useGlobalDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: Yup.object({\n      email: Yup.string().email('Invalid email address').required('Required'),\n      password: Yup.string().min(6, 'Must be at least 6 characters').required('Required'),\n    }),\n    onSubmit: (values) => {\n      console.log('Form data', values);\n      // Handle form submission (e.g., call an API and get user data)\n      const userData = { email: values.email }; // Mock user data\n      dispatch({ type: 'SET_USER', payload: userData });\n      toast.success('Successfully signed in!');\n    },\n  });\n\n  return (\n    <div>\n      <form onSubmit={formik.handleSubmit}>\n        <div>\n          <label htmlFor=\"email\">Email</label>\n          <input\n            id=\"email\"\n            type=\"email\"\n            {...formik.getFieldProps('email')}\n          />\n          {formik.touched.email && formik.errors.email ? (\n            <div>{formik.errors.email}</div>\n          ) : null}\n        </div>\n        <div>\n          <label htmlFor=\"password\">Password</label>\n          <input\n            id=\"password\"\n            type=\"password\"\n            {...formik.getFieldProps('password')}\n          />\n          {formik.touched.password && formik.errors.password ? (\n            <div>{formik.errors.password}</div>\n          ) : null}\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n      <ToastContainer />\n    </div>\n  );\n};\n\nexport default SignIn;\n"],"names":["SignIn","dispatch","useGlobalDispatch","formik","useFormik","initialValues","email","password","validationSchema","Yup","required","min","onSubmit","values","console","log","userData","type","payload","toast","success","_jsxs","children","handleSubmit","_jsx","htmlFor","id","getFieldProps","touched","errors","ToastContainer"],"sourceRoot":""}