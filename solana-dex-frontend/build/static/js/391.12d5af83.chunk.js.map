{"version":3,"file":"static/js/391.12d5af83.chunk.js","mappings":"0MAKA,MA8DA,EA9DmBA,KACjB,MAAM,UAAEC,EAAS,gBAAEC,IAAoBC,EAAAA,EAAAA,MAChCC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAQC,IAAaF,EAAAA,EAAAA,UAAS,KAC9BG,EAAeC,IAAoBJ,EAAAA,EAAAA,UAAS,IAqCnD,OACEK,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBACJC,EAAAA,EAAAA,KAAA,SACEC,KAAK,SACLC,YAAY,QACZC,MAAOZ,EACPa,SAAWC,GAAMb,EAASa,EAAEC,OAAOH,UAErCH,EAAAA,EAAAA,KAAA,SACEC,KAAK,SACLC,YAAY,SACZC,MAAOT,EACPU,SAAWC,GAAMV,EAAUU,EAAEC,OAAOH,UAEtCH,EAAAA,EAAAA,KAAA,UAAQO,QAlDaC,UACvB,IAAKpB,EAEH,YADAS,EAAiB,6BAInB,MAAMY,EAAa,IAAIC,EAAAA,WAAW,uCAC5BC,EAAgB,IAAIC,EAAAA,UAAU,uBAC9BC,QAAeC,EAAAA,OAAOC,KAAKN,EAAYE,EAAe,CAAC,EAAGK,EAAAA,kBAE1DC,EAAQ7B,EACR8B,EAAQ9B,GAEP+B,SAAeN,EAAOO,WAAW,CACtCH,QACAC,QACAG,KAAM,MACN9B,MAAO+B,WAAW/B,GAClBgC,KAAMD,WAAW5B,GACjB8B,UAAW,QACXC,UAAU,IAAIC,MAAOC,YAGjBC,GAAc,IAAIC,EAAAA,aAAcC,IAAIX,GACpCY,QAA0B1C,EAAgBuC,GAEhD,IACE,MAAMI,QAAavB,EAAWwB,mBAAmBF,EAAkBG,mBAC7DzB,EAAW0B,mBAAmBH,GACpCnC,EAAiB,iBAADuC,OAAkBJ,GACpC,CAAE,MAAOK,GACPxC,EAAiB,wBAADuC,OAAyBC,EAAMC,SACjD,GAkBoCvC,SAAC,uBACnCC,EAAAA,EAAAA,KAAA,KAAAD,SAAIH,MACA,C","sources":["components/LimitOrder.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { Connection, PublicKey, Transaction } from '@solana/web3.js'; // Removed SystemProgram\nimport { SERUM_PROGRAM_ID, Market } from '@project-serum/serum';\n\nconst LimitOrder = () => {\n  const { publicKey, signTransaction } = useWallet();\n  const [price, setPrice] = useState('');\n  const [amount, setAmount] = useState('');\n  const [statusMessage, setStatusMessage] = useState('');\n\n  const handleLimitOrder = async () => {\n    if (!publicKey) {\n      setStatusMessage('Connect your wallet first');\n      return;\n    }\n\n    const connection = new Connection('https://api.mainnet-beta.solana.com');\n    const marketAddress = new PublicKey('YOUR_MARKET_ADDRESS');\n    const market = await Market.load(connection, marketAddress, {}, SERUM_PROGRAM_ID);\n\n    const owner = publicKey;\n    const payer = publicKey;\n\n    const [order] = await market.placeOrder({\n      owner,\n      payer,\n      side: 'buy', // 'buy' or 'sell'\n      price: parseFloat(price),\n      size: parseFloat(amount),\n      orderType: 'limit', // 'limit', 'ioc', 'postOnly'\n      clientId: new Date().getTime(),\n    });\n\n    const transaction = new Transaction().add(order);\n    const signedTransaction = await signTransaction(transaction);\n\n    try {\n      const txid = await connection.sendRawTransaction(signedTransaction.serialize());\n      await connection.confirmTransaction(txid);\n      setStatusMessage(`Order placed: ${txid}`);\n    } catch (error) {\n      setStatusMessage(`Error placing order: ${error.message}`);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Limit Order</h2>\n      <input\n        type=\"number\"\n        placeholder=\"Price\"\n        value={price}\n        onChange={(e) => setPrice(e.target.value)}\n      />\n      <input\n        type=\"number\"\n        placeholder=\"Amount\"\n        value={amount}\n        onChange={(e) => setAmount(e.target.value)}\n      />\n      <button onClick={handleLimitOrder}>Place Limit Order</button>\n      <p>{statusMessage}</p>\n    </div>\n  );\n};\n\nexport default LimitOrder;\n"],"names":["LimitOrder","publicKey","signTransaction","useWallet","price","setPrice","useState","amount","setAmount","statusMessage","setStatusMessage","_jsxs","children","_jsx","type","placeholder","value","onChange","e","target","onClick","async","connection","Connection","marketAddress","PublicKey","market","Market","load","SERUM_PROGRAM_ID","owner","payer","order","placeOrder","side","parseFloat","size","orderType","clientId","Date","getTime","transaction","Transaction","add","signedTransaction","txid","sendRawTransaction","serialize","confirmTransaction","concat","error","message"],"sourceRoot":""}