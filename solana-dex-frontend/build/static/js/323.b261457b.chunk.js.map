{"version":3,"file":"static/js/323.b261457b.chunk.js","mappings":"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","sources":["components/LiquidityPools.js","components/Portfolio.js","components/PortfolioAnalytics.js","components/Staking.js","firebase.js","components/RealTimeData.js","components/TokenChart.js","utils/apiService.js","pages/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { Connection, PublicKey, Transaction, SystemProgram } from '@solana/web3.js';\n\nconst LiquidityPools = () => {\n  const { publicKey, signTransaction, connected } = useWallet();\n  const [poolData, setPoolData] = useState([]);\n  const [amount, setAmount] = useState('');\n  const [poolStatus, setPoolStatus] = useState('');\n\n  useEffect(() => {\n    // Fetch existing pool data\n    const fetchPoolData = async () => {\n      // Implement logic to fetch pool data\n      const data = [\n        { name: 'Pool 1', liquidity: 1000, address: 'POOL_1_ADDRESS' }, // Replace with actual pool address\n        { name: 'Pool 2', liquidity: 2000, address: 'POOL_2_ADDRESS' }, // Replace with actual pool address\n      ];\n      setPoolData(data);\n    };\n\n    fetchPoolData();\n  }, []);\n\n  const handleAddLiquidity = async (pool) => {\n    if (!connected) {\n      setPoolStatus('Please connect your wallet.');\n      return;\n    }\n\n    const connection = new Connection('https://api.mainnet-beta.solana.com');\n    const poolAddress = new PublicKey(pool.address);\n\n    const transaction = new Transaction().add(\n      SystemProgram.transfer({\n        fromPubkey: publicKey,\n        toPubkey: poolAddress,\n        lamports: amount * 1000000000, // Convert SOL to lamports (1 SOL = 10^9 lamports)\n      })\n    );\n\n    try {\n      const signedTransaction = await signTransaction(transaction);\n      const txid = await connection.sendRawTransaction(signedTransaction.serialize());\n      await connection.confirmTransaction(txid);\n      setPoolStatus(`Added ${amount} liquidity to ${pool.name} successfully: ${txid}`);\n    } catch (error) {\n      setPoolStatus(`Error adding liquidity: ${error.message}`);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Liquidity Pools</h2>\n      <ul>\n        {poolData.map((pool) => (\n          <li key={pool.name}>\n            {pool.name}: {pool.liquidity} liquidity\n            <input\n              type=\"number\"\n              placeholder=\"Amount to add\"\n              value={amount}\n              onChange={(e) => setAmount(e.target.value)}\n            />\n            <button onClick={() => handleAddLiquidity(pool)}>Add Liquidity</button>\n          </li>\n        ))}\n      </ul>\n      <p>{poolStatus}</p>\n    </div>\n  );\n};\n\nexport default LiquidityPools;\n","import React, { useEffect, useState } from 'react';\nimport { firestore, auth } from '../firebase';\n\nconst Portfolio = () => {\n  const [portfolio, setPortfolio] = useState([]);\n\n  useEffect(() => {\n    const fetchPortfolio = async () => {\n      const user = auth.currentUser;\n      if (user) {\n        const portfolioRef = firestore.collection('portfolios').doc(user.uid);\n        const doc = await portfolioRef.get();\n        if (doc.exists) {\n          setPortfolio(doc.data().assets);\n        }\n      }\n    };\n\n    fetchPortfolio();\n  }, []);\n\n  return (\n    <div>\n      <h2>Your Portfolio</h2>\n      <ul>\n        {portfolio.map((asset, index) => (\n          <li key={index}>{asset.name}: {asset.amount}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Portfolio;\n","import React from 'react';\nimport { Pie } from 'react-chartjs-2';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\n\nChartJS.register(ArcElement, Tooltip, Legend);\n\nconst PortfolioAnalytics = ({ portfolio = [] }) => {\n  const totalValue = portfolio.reduce((sum, asset) => sum + asset.value, 0);\n  const gains = portfolio.reduce((sum, asset) => sum + asset.gain, 0);\n\n  const assetAllocationData = {\n    labels: portfolio.map(asset => asset.name),\n    datasets: [\n      {\n        data: portfolio.map(asset => asset.value),\n        backgroundColor: portfolio.map((_, index) => `hsl(${index * 60}, 70%, 50%)`),\n      }\n    ]\n  };\n\n  const assetAllocationOptions = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Asset Allocation',\n      },\n    },\n  };\n\n  return (\n    <div>\n      <h2>Portfolio Analytics</h2>\n      <div>\n        <h3>Summary</h3>\n        <p>Total Value: ${totalValue.toFixed(2)}</p>\n        <p>Total Gains: ${gains.toFixed(2)}</p>\n      </div>\n      <div>\n        <h3>Asset Allocation</h3>\n        <Pie data={assetAllocationData} options={assetAllocationOptions} />\n      </div>\n      <div>\n        <h3>Details</h3>\n        <ul>\n          {portfolio.map((asset, index) => (\n            <li key={index}>\n              {asset.name}: {asset.amount} (${asset.value.toFixed(2)})\n            </li>\n          ))}\n        </ul>\n      </div>\n      {/* Add more detailed analytics and visualizations as needed */}\n    </div>\n  );\n};\n\nexport default PortfolioAnalytics;\n","import React, { useState } from 'react';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { Connection, PublicKey, Transaction, SystemProgram } from '@solana/web3.js';\n\nconst Staking = () => {\n  const { publicKey, signTransaction } = useWallet();\n  const [amount, setAmount] = useState('');\n  const [statusMessage, setStatusMessage] = useState('');\n\n  const handleStake = async () => {\n    if (!publicKey) {\n      setStatusMessage('Connect your wallet first');\n      return;\n    }\n\n    const connection = new Connection('https://api.mainnet-beta.solana.com');\n    const stakingAccount = new PublicKey('YOUR_STAKING_ACCOUNT'); // Replace with your staking account\n\n    const transaction = new Transaction().add(\n      SystemProgram.transfer({\n        fromPubkey: publicKey,\n        toPubkey: stakingAccount,\n        lamports: amount * 1000000000, // Convert SOL to lamports (1 SOL = 10^9 lamports)\n      })\n    );\n\n    try {\n      const signedTransaction = await signTransaction(transaction);\n      const txid = await connection.sendRawTransaction(signedTransaction.serialize());\n      await connection.confirmTransaction(txid);\n      setStatusMessage(`Staked ${amount} tokens successfully: ${txid}`);\n    } catch (error) {\n      setStatusMessage(`Error staking tokens: ${error.message}`);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Staking</h2>\n      <input\n        type=\"number\"\n        placeholder=\"Amount\"\n        value={amount}\n        onChange={(e) => setAmount(e.target.value)}\n      />\n      <button onClick={handleStake}>Stake Tokens</button>\n      <p>{statusMessage}</p>\n    </div>\n  );\n};\n\nexport default Staking;\n","import { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\n\nconst firebaseConfig = {\n  apiKey: \"YOUR_API_KEY\",\n  authDomain: \"YOUR_AUTH_DOMAIN\",\n  projectId: \"YOUR_PROJECT_ID\",\n  storageBucket: \"YOUR_STORAGE_BUCKET\",\n  messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\n  appId: \"YOUR_APP_ID\"\n};\n\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst firestore = getFirestore(app);\n\nexport { auth, firestore };\n","import React, { useEffect, useState } from 'react';\n\nconst RealTimeData = () => {\n  const [data] = useState([]); // Remove setData since it's not being used\n\n  useEffect(() => {\n    // Comment out the WebSocket code if not needed\n    // const ws = new WebSocket('wss://example.com/realtime');\n\n    // ws.onmessage = (event) => {\n    //   const newData = JSON.parse(event.data);\n    //   setData((prevData) => [...prevData, newData]);\n    // };\n\n    // ws.onerror = (error) => {\n    //   console.error('WebSocket error:', error);\n    // };\n\n    // return () => {\n    //   ws.close();\n    // };\n  }, []);\n\n  return (\n    <div>\n      <h2>Real-Time Data</h2>\n      <ul>\n        {data.map((item, index) => (\n          <li key={index}>{item.value}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default RealTimeData;\n","import React from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst TokenChart = ({ data }) => {\n  const chartData = {\n    labels: data.map(d => d.date),\n    datasets: [\n      {\n        label: 'Token Price',\n        data: data.map(d => d.price),\n        fill: false,\n        backgroundColor: 'rgb(75, 192, 192)',\n        borderColor: 'rgba(75, 192, 192, 0.2)',\n      },\n    ],\n  };\n\n  return <Line data={chartData} />;\n};\n\nexport default TokenChart;\n","// src/utils/apiService.js\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\nexport const fetchData = async (endpoint) => {\n  try {\n    const response = await fetch(`${API_URL}/${endpoint}`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Fetch data error:', error);\n    throw error;\n  }\n};\n\nexport const postData = async (endpoint, data) => {\n  try {\n    const response = await fetch(`${API_URL}/${endpoint}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Post data error:', error);\n    throw error;\n  }\n};\n","import React, { useState, useEffect } from 'react';\nimport RealTimeData from '../components/RealTimeData';\nimport Portfolio from '../components/Portfolio';\nimport TokenChart from '../components/TokenChart';\nimport PortfolioAnalytics from '../components/PortfolioAnalytics';\nimport Staking from '../components/Staking';\nimport LiquidityPools from '../components/LiquidityPools';\nimport { fetchData } from '../utils/apiService';\n\nconst Home = () => {\n  const [chartData, setChartData] = useState([]);\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const fetchChartData = async () => {\n      try {\n        const data = await fetchData('api/chart-data');  // Ensure this endpoint exists on the server\n        setChartData(data);\n      } catch (error) {\n        console.error('Error fetching chart data:', error);\n      }\n    };\n\n    const fetchMessage = async () => {\n      try {\n        const data = await fetchData('api/hello');\n        setMessage(data.message);\n      } catch (error) {\n        console.error('Error fetching message:', error);\n      }\n    };\n\n    fetchChartData();\n    fetchMessage();\n  }, []);\n\n  return (\n    <main>\n      <h2>Home Page</h2>\n      <p>{message}</p> {/* Display the message from the API */}\n      <p>Welcome to the Solana DEX!</p>\n      <RealTimeData />\n      <Portfolio />\n      <PortfolioAnalytics />\n      <Staking />\n      <LiquidityPools />\n      <TokenChart data={chartData} />\n    </main>\n  );\n};\n\nexport default Home;\n"],"names":["LiquidityPools","publicKey","signTransaction","connected","useWallet","poolData","setPoolData","useState","amount","setAmount","poolStatus","setPoolStatus","useEffect","async","name","liquidity","address","fetchPoolData","_jsxs","children","_jsx","map","pool","type","placeholder","value","onChange","e","target","onClick","connection","Connection","poolAddress","PublicKey","transaction","Transaction","add","SystemProgram","transfer","fromPubkey","toPubkey","lamports","signedTransaction","txid","sendRawTransaction","serialize","confirmTransaction","concat","error","message","handleAddLiquidity","Portfolio","portfolio","setPortfolio","user","auth","currentUser","portfolioRef","firestore","collection","doc","uid","get","exists","data","assets","fetchPortfolio","asset","index","ChartJS","register","ArcElement","Tooltip","Legend","_ref","totalValue","reduce","sum","gains","gain","assetAllocationData","labels","datasets","backgroundColor","_","toFixed","Pie","options","responsive","plugins","legend","position","title","display","text","Staking","statusMessage","setStatusMessage","stakingAccount","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getAuth","getFirestore","RealTimeData","item","CategoryScale","LinearScale","PointElement","LineElement","Title","chartData","d","date","label","price","fill","borderColor","Line","API_URL","process","REACT_APP_API_URL","fetchData","response","fetch","endpoint","ok","Error","json","console","Home","setChartData","setMessage","fetchChartData","fetchMessage","PortfolioAnalytics","TokenChart"],"sourceRoot":""}